<<React>>
<start> $ npx create-react-app something
<jsx> : 리액트에서 사용되는 JavaScript의 확장문법

<component> : HTML을 반환하는 함수 
형식 : <Name property="something">
    <property> : father component에서 child component로 보낼 수 있음
    <child component> : argument로 부모 component의 prop을 받음

*웹사이트에 동적데이터를 추가하는 법
map : array.map(current => {return item})

<propTypes> : prop의 형태를 설정

<<class component>> : extends React.Component {}
-react는 자동적으로 class compoenet의 render method를 실행한다
<state> : object - data가 변하기 때문에 사용 
사용 : state = {count : 0}
    render() { return <> {this.state.count} </>}
<event> - props로 onClick등을 사용
<component life cycle> 
*componentDidMount : component가 처음 render될 때 호출
*componentDidUpdate : setState마다 호출
*componenetWillUnmount : component가 죽을 때

<<create react-app>>
<npx> : 자동으로 update해줌
설치 - $ npm i npx -g 
사용 - $ npx create-react-app {filename}

<.env>
NODE_PATH = src : 기본적으로 src 파일을 보도록 

<<react-router-dom>> : 간단한 컴포넌트 묶음
$ yarn add react-router-dom
import { HashRouter as Router, Route} from "react-router-dom" - #
import { BrowserRouter as Router, Route, Switch, Redirect} from "react-router-dom"

*fragment : <> something </>
*Composition : 두 개 이상의 Route를 동시에 렌더링하는 방식
<Redirect> : 해당하는 페이지가 하나도 없으면 redirect
<Switch> : 한 번에 오직 하나의 Route만 Render하게 해줌(가장 첫번째 rendering)
*

<css module>
import styles from "./Header.module.css";
className - randomized

<styled Component>
설치 : $ yarn add styled-componenet
사용 : 
    const List = styled.ul`
        display: flex;
    `
    <List> blabla </List>

<styled reset>
import {createGlobalStyle} from "styled-componenet";
import reset from "styled-reset";

const GlobalStyles = createGlobalStyle`
    ${reset};
`
export default GlobalStyles;
App.js에 <GlobalStyles></GlobalStyles>

<withRouter> : 다른 컴포넌트를 감싸는 컴포넌트
export default withRouter(Header)
감쌌기 때문에 Header는 props를 가질 수 있음

<<data>>
<Axios>
설치 : $yarn add axios 
정의 : Axios는 브라우저, Node.js를 위한 Promise API를 활용하는 HTTP 비동기 통신 라이브러리 
특징 : 
    1. 별도의 설치가 필요하지만 fetch에 비해 많은 기능 지원과 문법이 간소화 됨
    2. axios의 인스턴스를 configure해줄 수 있음 
    const api = axios.create({
        baseURL: "",
        params: {},
    })

<<container presenter pattern>>
 conatiner - data와 state를 가지고 api를 불러옴 
 presenter - 그 데이터를 보여줌(style)

<<api>>
const api = axios.create({});
export const moviesApi = {
    nowPlaying: () => api.get("/"),
    showDetail: (id) => api.get(`/tv/${id}`, {
        params: {
            append_to_response: "videos",
        },
    }),
    search: (term) => api.get("/search/tv", {
        params: { query: encodeURIComponent(term)},
    }),
}

*router는 :id가 있으면 각 container props에 자동으로 할당함