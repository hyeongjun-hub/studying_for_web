<<1. Theory>>
HTML에서의 삽입 위치 : body의 가장 마지막
    <script src="script.js"></script>

* allert(something)
* console.log(something) : console에 print해줌
* camel case 작성법 : 소문자로 시작후 space대신 대문자로 시작

한 줄 : expression
    끝 : ;
변수의 사용방법
    Create -> Initioalize -> Use
    생성과 초기화를 동시에 할 수 있음
변수 생성
    let a; : 일반적인 변수 생성
    const a = n; : 상수 선언, 바꿀 수 없음
    var a;
*주석처리
    //do not read this
    /*it's also work */
변수의 종류
    String
        const what = "Something";
    Boolean
        const wat = true;
    Float
        const num = 55.1;
data 정렬
    Array
        const daysOfWeek = ["Mon", "Tue", True, 40];
    
    Object
        const Info = {Name:"name", 
        age:32,
        gender:"LALALAL",
        favMovies: ["Allong the gods", "HarryPoter"]
        favFood: [{name:"kimchi", fatty:false}]} //선언, 초기화

*console.log(Info.gender); //실행

function
    argument(인자)
    function func_name(arg1, arg2){
        console.log("Hello!", arg1, "world!", arg2, "\n")
    }
    func_name(1,'a');

    ``:백틱 - ${인자}로 변수대입 가능
    '':싱글 - string
    "":더블 - string

    function func_name(arg1, arg2){
        return `Hello! ${arg1} world! ${arg2} \n`
    }
    console.log(func_name(1,'a'));
        
    const calculator = {
        plus: function(a,b){
            return a+b
        }
    }
    console.log(calculator.plus(5,5))

    브라우저에서 제공하는 함수
        javascript에서 id를 불러오려면
            *DOM(Document Object Model)객체로 !
                javascript는 html에 있는 모든 요소를 object로 바꿔준다
            const title = document.getElementById("id");
            title.innerHTML = "Hi! From JS";
                원래 HTML의 요소를 바꿨음
            console.dir(title); - title이 가진것들 콘솔에 나열(자바스크립트 객체 표기법)
            title.style.color = "red"
            const title1 = document.querySelector("#id"); - 노드의 첫 번째 자식반환
event
    function handleResize(event){
        console.log(event);
        console.log("I have been resized");
    }

    window.addEventListener("resize", handleResize)
    *함수뒤에() : 함수를 지금 즉시 호출
    **함수뒤에()없음 : 함수호출

    const title = document.getElementById("id");
    function mouseclick(){
        title.style.color = "blue"
    }
    title.addEventListener("click", mouseclick);

*prompt - 매우 오래된 자바스크립트 함수로 무언가 입력할 수 있도록 해줌

if(condition){
    block
}
else if{
    block
}
else {
    block
}

* === 는 조건을 확인하는 용도
** && : and
*** || : or
**** !== : 같지않다

    if else로 click과 default 나눠 색깔 정해주기
        1. css를 바꿔주는 방법 js_try.js참고
        2. 클래스를 추가해주는 방법
            단점: 이전의 클래스가 사라져버림(replace)
            =>클래스리스트 사용 
                title.classname(CLICKED_CLASS)->
                title.classList.add(CLICKED_CLASS)
                title.classList.remove(CLICKED_CLASS)
                title.classList.contains(CLICKED_CLASS)
                    =>title.classList.toggle(CLICKED_CLASS)

javascript function
const date = new Date(); - 현재시각으로 변수 선언
setInterval(function, time); - 함수를 실행 하고 싶은 시간간격동안 함수를 반복 실행

local storage - 작은 자바스크립트 정보들을 브라우저에 저장

html에서 불러오는 것이 아닌 직접 변수를 만들 때
    const li = document.createElement("li");
하위 자식으로 만들 때
    li.appendChild(span);
id를 설정할 때
    li.id = "~~";
*local storage에는 자바스크립트의 data를 저장할 수 없다.
    string만 저장 가능, 모든 데이터를 string으로 저장
         => JSON.stringify() - (javascript object notation)

*array.forEach(function(){}); - array에 있는 item 전부 function실행
*array.filter(funtion(){}); - array에 있는 item 전부 function 실행 후 true인 것들만의 list 반환
ex)
function filterFn(toDo){
    return toDo.id === 1 //id가 1인 것만 true로 반환
}

function deleteToDo(event){
    const btn = event.target;
    const li = btn.parentNode;
    toDoList.removeChild(li);
    const cleanToDos = toDos.filter(filterFn); //list에서 filterFn실행 후 true인 것들만 반환
}
exend)

어떤 버튼이 선택되었는지 모를 때 (mouseEvent~~~로 표시될 때)event.target 사용
    -><button>X</button>
버튼의 father (어떤 li?)를 찾을 때 event.target.parentNode

parseInt -> string을 int형으로 