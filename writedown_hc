*
ctrl + / 으로 주석처리 가능

<<CSS>>

position: fixed : 화면에 고정, position은 초기에 설정한 공간.
position: top, left, right, buttom
다른 레이어로 이동함. fixed의 ex)menu of netflix
position: static(default) 레이아웃이 박스를 처음 위치하는 곳에 두는 것
position: relative : 엘리멘트가 처음 위치한 곳에 상대적 위치로
position: absolute : 가장 가까운 relative 부모를 기준으로 위치함
<combinator> div > span : 바로 밑 자식 span에만 해당,
p + span : p 바로 다음 span에 해당
바로 다음 오지 않으면 ~사용
<attribute selectors> input[type~=" "] : 포함하고 있다, $= : 마지막
<something:state의 종류> 1.active - 눌러져있을 때 2.hover - 마우스커서가 올라갔을때
3.focus - keyboard로 선택했을 때 4.visited -방문하고 난 뒤
5.focus within(안쪽) - focused인 자식을 가진 부모에게 적용
p::selection - 드래그한 문장들 , p::first-letter - 첫 문자
color: 1.#16진수 2.rgb(,,) 3.rgba(,,,투명도)

<<advanced CSS>>

<transition> : 어떤 상태에서 다른 상태로의 "변화"를 애니메이션으로 만드는 방법.
    state가 없는 쪽에 붙어야함. 
    transition: (어떤것을 변화하게 할건지)
        something{
            transition: opacity 1s ease-in-out;
            transition: transform 1s linear;
        }         
        something : hover {
            opacity : 0.5;
        }
<transformation> : element 그 자체 모양변형, 여러개의 중복가능
    transform: rotateXYZ(ndegree);
    transform: translationXYZ(10px);
<animation> 
    @keyframes something{   from{}  to{}   }
    animation: something 1s ease-in-out infinite;
*border radius : 50%=원
<media query> : 사용자의 screen의 사이즈를 알 수 있는 방법
    @media screen and (max-width:npx){ div{조건충족사항} }

<<git, github>>
- repositoy는 자신의 코드가 살고 있는 곳.
→ 코드의 변경내역과 그 히스토리를 갖고 있는 폴더.
- commit은 기본적으로 시점(pointing time)

<<KoKoa clone>>
BEM(Block Element Modifier) : id와 class가 아닌 모든 것을 class로 만들어서 한눈에 어떤 속성인지 
알 수 있게 해줌.

<second screen(friend)>
1. html
    !을 이용해 기본 form 불러올 수 있음
    l을 이용해 link form 불러올 수 있음
    button은 <input type="submit" value="something"/>
    webpage를 이용해 icon 가져올 수 있음
        <script>는 body가장 마지막에 붙여넣기
    <form action="something.html" method="get"(or post)></form>
        something.html로 이동
        방식 get : 보안취약 post : backend에서 서버와 통신시 사용

2. CSS
    body{ font-family: } 로 폰트설정 가능 
        webpage에서 폰트가져올 때 @import url()
    임의로 색 설정 시 
        variable.css만들고  :root{ --somthing:#1234 }
        @import "variable.css"후 사용할 때 var(--something)
    모든 기본설정 ( margin, padding, ... )을 없앨 때
        reset.css에 붙여넣기 후 import
    가장 많이 쓰이는 것들
        display : flex;
        flex-direction : column;
        margin: 가로 세로;
        padding: 가로 세로;
        text-align: center;
        align-items: center;
        justify-content: center;
    조건이 아닌 것을 설정하고 싶을 때
        #login-form imput:not([type="submit"]){ }
    생소한 syntax
        .status-bar__column:nth-child(2) { }    
        #login-form input::placeholder{ }
        cursor : pointer;

<third screen(chat)>
1. html
    vsc의 단축키로 nav>ul>li*4>a로 빠르게 nav form 만들 수 있음

2. css
    position: fixed;
        top: 0; or bottom: 0;으로 위치 고정가능
    200px의 box를 만들고 left에 padding 50px을 추가하면 250px의 박스가 된다.
        box-sizing: border-box;로 size늘어나는 걸 막을 수 있음
    position : absolute로 겹치게 만들 수 있음
        기준은 부모중 relative한 것 없으면 body

    어떤 명령어가 반복적으로 사용된다면 그것을 var로 만드는것이 편하다
        <variable.css>
            :root{
                --something: repeated;
            }

<find screen>
1. html
    vsc의 단축기로 .class-name*number 으로 빠르게 여러개의 div만들 수 있음
    대문자는 디자인적인 부분, css에서 소문자를 대문자로 바꿔줄 수 있음

2. css
    text-transform : uppercase;
    .something1 .something2{ }방법으로 something2의 다른곳에서의 바뀜을 방지
    
*vsc 단축키
1. alt+shift+마우스
    마우스가 어디로 가든지 커서가 생성됨

2. drag -> alt+shift+i
    드래그한곳에 전부 커서가 생김

3. ctrl+b
    hide sidebar

<z-index>
z-index값이 클수록 화면의 앞으로 옴
기본값: 0

<chat screen>
1. css
    border-top-left-radius
    flex child의 order
        order을 바꿔줌으로써 보이는 순서를 바꿔줄 수 있다. 
    class Modifier
        classname-option으로 그 클래스option의 것만 더 바꿔줄 수 있다.
        css:  .classname-option { css }
              .classname-option .classname2 { css } (option하위의 classname2)
        html: <span class="classname classname-option"></span>
                <p class="classname2"></p>

<animation>
@keyframes something{   from{}  to{}   }
    visibility : hidden; 
        마우스가 걸리지 않게 빠져버림(html은 여전히 존재) -> JavaScript필요
animation: something 1s ease-in-out forwards
    forwards를 줌으로써 from으로 다시 돌아가지않고 to keyframe을 계속 유지

    *display : none
        하위element 모두 보이지않게


<<git>>
<branch>
    master
    branch 평행세계 만들 수 있음
    commit후 git에서 branch를 선택하는 것 만으로 vsc의 코드와 브라우저가 바뀜
    마지막에 merge하는 것으로 하나로 통합가능

<git>
    static webpage를 무료 호스팅을 해줌(publishing)
    *static webpage : only css html javascript (front-end만)
        branch이름을 필수적으로 gh-pages로 만듦 
        저장소는 public


<<MASTER CSS>>
<flex-box>
1. align-self : child에서 자기 자신만 align 되도록
    ex) .child:nth-child(2){align-self: center} -> 두 번째 child만 align center
2. order - 순서를 바꿔야하는데 html을 바꿀 수 없을 때 
    default : 0
3. flex-wrap
    flex-box의 default - width를 깨뜨려서라도 한 low에 있도록 만듬(nowrap)
    flex-wrap: wrap - width를 깨뜨리지 않음
  3.1. align-content : wrap해서 생겨난 중간 공간
    default: flex-start
4. flex-shrink : flex-box가 찌그러질 때
    default : 1 
    2면 두배 더 찌그러짐
5. flex-grow : flex-box가 공간이 남을 때 차지하는 공간
    default : 0
6. flex-basis: element에게 처음 크기를 주는 것, 유동적으로 변함
    - flex-glow에 민감함
*flex-flow : flex-direction + flex-wrap

<grid> : 격자
father에서 선언 
default: (1, n)
1. grid-template-columns : column의 크기와 개수
    1.1 line-naming : line에 이름을 붙임
    : [first-line] 100px [second-line] 100px;
2. grid-template-rows: row의 크기와 개수
3. column-gap, row-gap, gap : gap의 크기
*repeat(n, 크기) : 크기를 n번 반복
*auto : 가능한 만큼 크게
    auto 200px === repeat(4, 200px);
4. grid-template-areas : layout을 설정
    사용: 각 child에 grid-area: head;
    grid-template-areas: 
    "header header header header" 1fr / 1fr 1fr 1fr 1fr // 높이 / 너비
    "body body . body"
    "footer footer footer footer"
    ;
5. grid-column-start & grid-column-end 
    첫 번째 column은 양끝에 선 두개를 가지고 있음 
    사용 : grid-column-start: 1;
           grid-column-end: 3; => 두 번째 column까지 stretch
    element의 순서를 바꿀 때도 사용가능 
  5.1 shortcut 
    grid-column: 1 / 3; 
    -1 - 끝 line
    -2 - 끝에서 두 번째 line
    span : n - n개 크기의 공간을 가짐 
  5.2 grid-area: grid-row-start, grid-column-start, grid-row-end, grid-column-end;
6. fraction : 사용 가능한 공간
    사용 - 1fr, 4fr..
        grid-template-columns: 1fr 1fr 1fr 1fr;
    주의사항 - 전체 크기가 설정되지않아도 가로는 크기가 정해져 있지만 
                세로는 무한대이므로 1fr이 0이 된다.

7. grid-template: grid의 template을 설정
    [header-start] "header header header header" 1fr [header-end]  / 1fr 1fr 1fr 1fr
    [content-start] "body body . body" 1fr [content-end] 
    [footer-start] "footer footer footer footer" 1fr [footer-end] 

8. justify-items
    default: stretch - 자식들을 늘려서 본인을 채우게 함
    justify-items: start - element크기만큼만 처음부터 채움
   8.1 align-items - vertical
   8.2 short-cut 
    place-items: y x; - 사각형 들
9. place-content: y x; - 모든 사각형 다 같이 함께
10. place-self: y x; - 사각형 하나 
11. auto columns and rows 
    11.1 grid-auto-rows - 더 많은 content가 있으면 주어지는 크기로 rows 더 만들어 줌
    11.2 grid-auto-flow: column; - direction을 바꿔줌
*minmax 
    사용 : grid-template-columns: repeat(5, minmax(100px, 1fr));
12. auto-fit auto-fill 
    사용 : grid-template-columns: repeat(auto-fit, 1fr)
    auto-fill - column을 최대한 많이 만들고 주어진 크기로 빈공간을 만듬
    auto-fit - element를 주어진 크기에 stretch하여 다 채움 
13. min content & max content
    사용: grid-template-columns: max-content num num; - 내부 content의 크기만큼 커짐
    min-content - content포함하는 최소크기로