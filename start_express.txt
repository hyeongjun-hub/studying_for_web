<start project>
npm init
npm i express

<use Babel>
npm i --save-dev @babel/core 
파일생성) babel.config.json 
{
    "presets": ["@babel/preset-env"]
}
npm i @babel/preset-env --save-dev
npm i @babel/node
"dev": "babel-node index.js"

<use nodemon>
 npm i nodemon --save-dev
"dev": "nodemon --exec babel-node index.js"

<use pug>
npm i pug
app.use("view engine", "pug");
app.use("views", process.cwd());

<use MVP.css>
   link(rel="stylesheet" href="https://unpkg.com/mvp.css")

<use POST method>
app.use(express.urlencoded({ extended: true }));
const {name} = req.body;

<use DataBase>
chocolatey로 mongodb를 설치
npm i mongoose
import mongoose from "mongoose";
mongoose.connect("mongodb://", {
	useNewUrlParser: true, 
	useUnifiedTopology: true,
	useFindAndModify: false,
});
const db = mongoose.connection;
db.on("error", efucntion);
db.once("open", function);

<use mongoose model>
const schema = mongoose.Schema({
	:, :, :,	
})
const model = mongoose.model(Video, schema);
try{const videos = await model.find()} -> collections
catch{}
const video = new model({ :, :, :, }; -> document
await video.save();

<use session>
npm i express-session;
import session from "express-session";
app.use(session({
	secret: "sdafsdfasdf",
	resave: false, //수정되지 않아도 계속 저장
	saveUninitialized: false, //false-세션이 수정되면 저장하고 쿠키줌
}); - before router
req.session.에 정보 저장(세션 수정)
*template에서 session에 접근하기 위해서는 
	res.local.something에 저장해서 #{something}으로 사용

<use mongoStore>
session을 db에 저장
npm i connect-mongo
import MongoStore from "connect-mongo"
app.use(session({
	store: MongoStore.create({mongoUrl: "mongodb://"}),
}));
-> sessions라는 collection이 mongo에 생성됨
-> backend에 접근하면 session이 생성되고 sessions에 저장됨

<use dotenv>
.env에 환경변수들을 저장(secret, dbURL...)
npm i dotenv
import "dotenv/config" - 최대한 먼저 작성
process.env.로 사용
	
<use Webpack>
npm i webpack webpack-cli -D

<use icons>
https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css